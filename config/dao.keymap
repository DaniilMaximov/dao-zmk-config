#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 2
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

//B 2nd row
//left
ZMK_UNICODE_SINGLE(lb_1_tilde, KP_N0, KP_N1, KP_N2, KP_N6)
ZMK_UNICODE_SINGLE(lb_2_plus, KP_N0, KP_N0, KP_N4, KP_N3)
ZMK_UNICODE_SINGLE(lb_3_minus, KP_N0, KP_N0, KP_N4, KP_N5)
ZMK_UNICODE_SINGLE(lb_4_left_parenthesis, KP_N0, KP_N0, KP_N4, KP_N0)
ZMK_UNICODE_SINGLE( lb_5_right_parenthesis,   KP_N0, KP_N0, KP_N4, KP_N1)

//right
ZMK_UNICODE_SINGLE(rb_1_left_brace, KP_N0, KP_N1, KP_N2, KP_N3)
ZMK_UNICODE_SINGLE(rb_2_right_brace, KP_N0, KP_N1, KP_N2, KP_N4)
ZMK_UNICODE_SINGLE(rb_3_underscore, KP_N0, KP_N0, KP_N9, KP_N5)
ZMK_UNICODE_SINGLE(rb_4_equal, KP_N0, KP_N0, KP_N6, KP_N1)
ZMK_UNICODE_PAIR(rb_5_colon_semi_colon, KP_N0, KP_N0, KP_N5, KP_N9,  KP_N0, KP_N0, KP_N5, KP_N8)
ZMK_UNICODE_PAIR(rb_6_quote_double_quote, KP_N0, KP_N1, KP_N4, KP_N6,  KP_N0, KP_N1, KP_N4, KP_N8)

//C 3rd row
//left
//1 is common backslash
ZMK_UNICODE_SINGLE(lc_2_pipe, KP_N0, KP_N1, KP_N2, KP_N4)
ZMK_UNICODE_SINGLE(lc_3_apostrophe, KP_N0, KP_N0, KP_N9, KP_N6)
ZMK_UNICODE_SINGLE(lc_4_left_bracket, KP_N0, KP_N0, KP_N9, KP_N1)
ZMK_UNICODE_SINGLE(lc_5_right_bracket, KP_N0, KP_N0, KP_N9, KP_N2)

//right
ZMK_UNICODE_SINGLE(rc_1_less_than, KP_N0, KP_N0, KP_N6, KP_N0)
ZMK_UNICODE_SINGLE(rc_2_greater_than, KP_N0, KP_N0, KP_N6, KP_N2)
ZMK_UNICODE_SINGLE(rc_3_comma, KP_N0, KP_N0, KP_N4, KP_N4)
ZMK_UNICODE_SINGLE(rc_4_dot, KP_N0, KP_N0, KP_N4, KP_N6)
ZMK_UNICODE_PAIR( rc_5_slash_question, KP_N0, KP_N0, KP_N4, KP_N7, KP_N0, KP_N0, KP_N6, KP_N3)



/ {
    combos {
        compatible = "zmk,combos";

        language_combo {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <12 37>;
        };

        altTab {
            bindings = <&kp LA(TAB)>;
            key-positions = <12 36>;
        };

        ctrlshiftesc {
            bindings = <&kp LS(LC(ESCAPE))>;
            key-positions = <0 12 24>;
        };
    };

    macros {
        language_switcher: language_switcher {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp LEFT_SHIFT>,
                <&macro_release>,
                <&kp LALT>;

            label = "LANGUAGE_SWITCHER";
        };

        dot: dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N4 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "DOT";
        };
    };



    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_ALT ESCAPE            &kp Q  &kp W  &kp E      &kp R      &kp T        &kp Y         &kp U          &kp I         &kp O    &kp P     &kp LBKT
&mt LEFT_SHIFT LA(LEFT_SHIFT)  &kp A  &kp S  &kp D      &kp F      &kp G        &kp H         &kp J          &kp K         &kp L    &kp SEMI  &mt RIGHT_SHIFT SQT
&mt LCTRL LEFT_GUI             &kp Z  &kp X  &kp C      &kp V      &kp B        &kp N         &kp M          &kp COMMA     &kp DOT  &kp FSLH  &kp INSERT
                                             &lt 2 TAB  &kp SPACE  &lt 1 ENTER  &lt 1 ESCAPE  &kp BACKSPACE  &lt 2 DELETE
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp N1          &kp N2        &kp N3                &kp N4                  &kp N5                         &kp N6     &kp N7          &kp N8            &kp N9          &kp N0     &kp RIGHT_BRACKET
&trans  &lb_1_tilde     &lb_2_plus    &lb_3_minus           &lb_4_left_parenthesis  &lb_5_right_parenthesis        &kp MINUS  &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp UNDERSCORE  &kp EQUAL  &trans
&none   &none           &none         &kp LEFT_BRACKET      &kp RIGHT_BRACKET       &kp BACKSLASH                  &kp SLASH  &kp LESS_THAN   &kp GREATER_THAN  &kp PIPE        &euro_sign     &trans
                                      &lt 3 TAB             &trans                  &trans                         &trans     &trans          &lt 3 DEL
            >;
        };

        raise_layer {
            bindings = <
&kp CAPSLOCK  &kp F1                &kp F2                &kp F3        &kp F4           &kp F5     &kp F6     &kp F7       &kp F8          &kp F9         &kp F10  &kp PRINTSCREEN
&trans        &none                 &kp C_MUTE            &kp C_VOL_DN  &kp C_VOLUME_UP  &none      &kp HOME   &kp LEFT     &kp UP_ARROW    &kp RIGHT      &none    &none
&trans        &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none         &none            &none      &kp END    &kp PAGE_UP  &kp DOWN_ARROW  &kp PAGE_DOWN  &none    &none
                                                          &trans        &trans           &lt 3 RET  &lt 3 ESC  &trans       &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &trans        &none         &trans
            >;
        };
    };
};
